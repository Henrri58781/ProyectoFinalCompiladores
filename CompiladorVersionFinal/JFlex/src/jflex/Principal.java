package jflex;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.StringReader;
import java_cup.runtime.Symbol;
import javax.swing.JTextArea;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author Henrr
 */
public class Principal extends javax.swing.JFrame {

    RSyntaxTextArea txtEntrada = new RSyntaxTextArea();
    String textoArchivo;
    File Archivo;

    public Principal() {
        initComponents();
        rsyntax();
    }

    public void rsyntax() {
        // 1. Añadir estilo de lenguaje Java
        txtEntrada.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        // 2. Quilar la línea amarilla de la posición del cursor
        txtEntrada.setHighlightCurrentLine(false);
        // 3. Inicializar txtEntrada con un mensaje de bienvenida
        txtEntrada.setText("//Hola mundo");
        // 4. Integrar txtEntrada a TextScolPane
        RTextScrollPane sp = new RTextScrollPane(txtEntrada);
        // 5. Integrar a nuestro objeto jPanelPrincipal
        jPanelPrincipal.add(sp);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelPrincipal = new javax.swing.JPanel();
        NombreArchivo = new javax.swing.JTextField();
        CargarArchivo = new javax.swing.JButton();
        guardarArchivo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnGrupos = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSintaxis = new javax.swing.JTextArea();
        jPanelPrincipal = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        PanelPrincipal.setBackground(new java.awt.Color(3, 145, 53));

        NombreArchivo.setToolTipText("Ingrese el nombre para guardar archivo sin que se abra el cuadro de dialogo");
        NombreArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreArchivoActionPerformed(evt);
            }
        });

        CargarArchivo.setFont(new java.awt.Font("Agency FB", 1, 14)); // NOI18N
        CargarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jflex/Abrir.png"))); // NOI18N
        CargarArchivo.setToolTipText("Abrir Archivo");
        CargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarArchivoActionPerformed(evt);
            }
        });

        guardarArchivo.setFont(new java.awt.Font("Agency FB", 1, 14)); // NOI18N
        guardarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jflex/Guardar.png"))); // NOI18N
        guardarArchivo.setToolTipText("Guardar Proceso");
        guardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivoActionPerformed(evt);
            }
        });

        txtResultado.setBackground(new java.awt.Color(204, 255, 204));
        txtResultado.setColumns(20);
        txtResultado.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtResultado.setRows(5);
        txtResultado.setToolTipText("Muestra los elementos que contiene el programa ejecutado");
        jScrollPane2.setViewportView(txtResultado);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Consola");

        btnGrupos.setBackground(new java.awt.Color(153, 153, 153));
        btnGrupos.setFont(new java.awt.Font("Agency FB", 1, 14)); // NOI18N
        btnGrupos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jflex/Analisis.png"))); // NOI18N
        btnGrupos.setToolTipText("Analizar");
        btnGrupos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGruposActionPerformed(evt);
            }
        });

        txtSintaxis.setBackground(new java.awt.Color(204, 255, 204));
        txtSintaxis.setColumns(20);
        txtSintaxis.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtSintaxis.setRows(5);
        txtSintaxis.setToolTipText("Muestra si la ejecucción fue exitosa o de lo contrario muestra los errores");
        jScrollPane3.setViewportView(txtSintaxis);

        jPanelPrincipal.setBackground(new java.awt.Color(204, 255, 204));
        jPanelPrincipal.setLayout(new java.awt.CardLayout());

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Resultado");

        javax.swing.GroupLayout PanelPrincipalLayout = new javax.swing.GroupLayout(PanelPrincipal);
        PanelPrincipal.setLayout(PanelPrincipalLayout);
        PanelPrincipalLayout.setHorizontalGroup(
            PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPrincipalLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(NombreArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CargarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(guardarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PanelPrincipalLayout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(72, 72, 72))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPrincipalLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PanelPrincipalLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );
        PanelPrincipalLayout.setVerticalGroup(
            PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PanelPrincipalLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(NombreArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CargarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guardarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGrupos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jPanelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGruposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGruposActionPerformed

        // TODO add your handling code here:
        File archivo = new File("archivo.txt");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(txtEntrada.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        Reader lector;
        try {
            // Crear clase con las reglas ...
            analizarLexico();
            analizarSintaxis();

        } catch (FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnGruposActionPerformed

    private void guardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoActionPerformed
        // TODO add your handling code here:
        if ("".equals(NombreArchivo.getText())) {
            GuardarExpresion();

        } else {
            FileWriter Arc;
            try {
                Arc = new FileWriter(NombreArchivo.getText() + ".txt");
                BufferedWriter Escribe = new BufferedWriter(Arc);
                PrintWriter Escritura = new PrintWriter(Escribe);
                Escritura.println(txtResultado.getText());
                Escribe.close();
                Escritura.close();
                JOptionPane.showMessageDialog(null, "ARCHIVO GUARDADO");
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_guardarArchivoActionPerformed

    private void CargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarArchivoActionPerformed
        try {
            //Cargamos el archivo
            SeleccionarArchivo();

            guardarArchivo.setEnabled(true);
            btnGrupos.setEnabled(true);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CargarArchivoActionPerformed

    // Eventos de componentes
    private void NombreArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreArchivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreArchivoActionPerformed

    //metodos
    public void SeleccionarArchivo() throws FileNotFoundException, IOException {
        JFileChooser Elegir = new JFileChooser();
        Elegir.setDialogTitle("SELECCIONE EL ARCHIVO PARA MOSTRAR");
        Elegir.showOpenDialog(Elegir);
        Archivo = new File(Elegir.getSelectedFile().getAbsolutePath());
        textoArchivo = "";

        if (Archivo.exists() && Archivo.canRead()) {
            FileReader Ar1 = new FileReader(Archivo);
            String Almacena;
            BufferedReader ArIn = new BufferedReader(Ar1);
            while ((Almacena = ArIn.readLine()) != null) {
                textoArchivo += Almacena + "\n";
            }
            ArIn.close();
            txtEntrada.setText(textoArchivo);
        } else {
            JOptionPane.showConfirmDialog(null, "ARCHIVO NO EXISTE O NO SE PUEDE LEER ");
        }
    }

    private void analizarLexico() throws IOException {
        int cont = 1;

        String expr = (String) txtEntrada.getText();
      
        Lexer lexer = new Lexer(new StringReader(expr));
        String resultado = "LÍNEA    \t\tSÍMBOLO\n"+ "Línea "+cont+" \n";
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                txtResultado.setText(resultado);
                txtResultado.setForeground(new Color(0, 140, 49));
                return;
            }
            switch (token) {
                case Linea:
                    cont++;
                    resultado += "Línea " + cont + "\n";
                    break;
                case Comillas:
                    resultado += "  [Comillas]\t\t" + lexer.lexeme + "\n";
                    break;
                case Cadena:
                    resultado += "  [Tipo de dato]\t" + lexer.lexeme + "\n";
                    break;
                case T_dato:
                    resultado += "  [Tipo de dato]\t" + lexer.lexeme + "\n";
                    break;
                case If:
                    resultado += "  [Reservada if]\t" + lexer.lexeme + "\n";
                    break;
                case Else:
                    resultado += "  [Reservada else]\t" + lexer.lexeme + "\n";
                    break;
                case Do:
                    resultado += "  [Reservada do]\t" + lexer.lexeme + "\n";
                    break;
                case While:
                    resultado += "  [Reservada while]\t" + lexer.lexeme + "\n";
                    break;
                case For:
                    resultado += "  [Reservada for]\t" + lexer.lexeme + "\n";
                    break;
                case Igual:
                    resultado += "  [Operador igual]\t" + lexer.lexeme + "\n";
                    break;
                case Suma:
                    resultado += "  [Operador suma]\t" + lexer.lexeme + "\n";
                    break;
                case Resta:
                    resultado += "  [Operador resta]\t" + lexer.lexeme + "\n";
                    break;
                case Multiplicacion:
                    resultado += "  [Operador multiplicacion]\t" + lexer.lexeme + "\n";
                    break;
                case Division:
                    resultado += "  [Operador division]\t" + lexer.lexeme + "\n";
                    break;
                case Op_logico:
                    resultado += "  [Operador logico]\t" + lexer.lexeme + "\n";
                    break;
                case Op_incremento:
                    resultado += "  [Operador incremento]\t" + lexer.lexeme + "\n";
                    break;
                case Op_relacional:
                    resultado += "  [Operador relacional]\t" + lexer.lexeme + "\n";
                    break;
                case Op_atribucion:
                    resultado += "  [Operador atribucion]\t" + lexer.lexeme + "\n";
                    break;
                case Op_booleano:
                    resultado += "  [Operador booleano]\t" + lexer.lexeme + "\n";
                    break;
                case Parentesis_a:
                    resultado += "  [Parentesis de apertura]\t" + lexer.lexeme + "\n";
                    break;
                case Parentesis_c:
                    resultado += "  [Parentesis de cierre]\t" + lexer.lexeme + "\n";
                    break;
                case Llave_a:
                    resultado += "  [Llave de apertura]\t" + lexer.lexeme + "\n";
                    break;
                case Llave_c:
                    resultado += "  [Llave de cierre]\t" + lexer.lexeme + "\n";
                    break;
                case Corchete_a:
                    resultado += "  [Corchete de apertura]\t" + lexer.lexeme + "\n";
                    break;
                case Corchete_c:
                    resultado += "  [Corchete de cierre]\t" + lexer.lexeme + "\n";
                    break;
                case Main:
                    resultado += "  [Reservada main]\t" + lexer.lexeme + "\n";
                    break;
                case P_coma:
                    resultado += "  [Punto y coma]\t" + lexer.lexeme + "\n";
                    break;
                case Identificador:
                    resultado += "  [Identificador]\t\t" + lexer.lexeme + "\n";
                    break;
                case Numero:
                    resultado += "  [Numero]\t\t" + lexer.lexeme + "\n";
                    break;
                case ERROR:
                    resultado += "  [Simbolo no definido]\n";
                    break;
                default:
                    resultado += "  [ " + lexer.lexeme + " ]\n";
                    break;
            }
        }
    }

    private void analizarSintaxis( ) throws IOException {
        String ST = txtEntrada.getText();
        Sintax s = new Sintax(new jflex.LexerCup(new StringReader(ST)));

        try {
            s.parse();
            txtSintaxis.setText("::: EJECUCIÓN EXITOSA :::");
            txtSintaxis.setForeground(Color.green);
            
        } catch (Exception ex) {
            Symbol sym = s.getS();
            txtSintaxis.setText("Error de sintaxis. Línea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            txtSintaxis.setForeground(Color.red);
            
        }
    }

    public void GuardarExpresion() {

        try {
            JFileChooser Archi = new JFileChooser();
            Archi.showSaveDialog(Archi);
            File Dir = new File(Archi.getSelectedFile().getAbsolutePath() + ".txt");
            FileWriter Arc = new FileWriter(Dir);
            BufferedWriter Escribe = new BufferedWriter(Arc);
            PrintWriter Escritura = new PrintWriter(Escribe);
            Escritura.println(txtResultado.getText());
            Escribe.close();
            Escritura.close();
            JOptionPane.showMessageDialog(null, "ARCHIVO GUARDADO");
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "NO INGRESO EL NOMBRE NI LA UBICACION DONDE SE GUARDARA EL ARCHIVO");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "EL ARCHIVO NO SE PUEDE ESCRIBIR");
        }
    }
    //Token

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CargarArchivo;
    private javax.swing.JTextField NombreArchivo;
    private javax.swing.JPanel PanelPrincipal;
    private javax.swing.JButton btnGrupos;
    private javax.swing.JButton guardarArchivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanelPrincipal;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtResultado;
    private javax.swing.JTextArea txtSintaxis;
    // End of variables declaration//GEN-END:variables
}
